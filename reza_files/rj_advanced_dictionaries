# https://journey.makers.tech/pages/advanced-dictionaries

square_dict = {}
for num in range(1, 11):
    square_dict[num] = num*num
print("Add squared numbers to a dictionary ", square_dict)

# Another method to do this.
square_dict2 = {num: num*num for num in range(1, 11)}
print("Another attempt ", square_dict2)

# Printing from a dictionary
person = {'name' : 'jo', 'age' : 42, 'height' : 170}
for item in person:
    print(f"key value pair: {item} -> {person[item]}")


# Assigning values to existing keys.
friends = ["Will", "Bernie", "Garth", "Suze"]
card_suit = ["Spades", "Clubs", "Diamonds", "Hearts"]

import random
random_dict = {friend:random.choice(card_suit) for friend in friends}
print("Random card suit allocation - " , random_dict)

# 
from random import shuffle
shuffle(card_suit)
card_friends = {friend:card for (friend, card) in zip(friends, card_suit)}
print("Allocated card suit allocation - " , card_friends)


# Running score example
tourny_dict = {"Dan":2, "Wolfgang":14, "June":43, "Tany":32, "Sharon": 8}
scores = [1, 3, 4, 3, 5]
count = 0
for x in tourny_dict:
    tourny_dict[x] += scores[count]
    count += 1

print("Running total - ", tourny_dict)

# Eliminating players.
tourny_dict = {'Dan': 10, 'Wolfgang': 20, 'June': 53, 'Tany': 37, 'Sharon': 14, 'Will': 0}
next_round = {}
for player, score in tourny_dict.items():
    if score > 20:
        next_round[player] = score

print("Eliminating players - ", next_round)
 
# And now using filter()
next_round = {}
next_round = dict(
                filter(
                    lambda player: player[1] > 20, tourny_dict.items()
                    )
            )
print("Eliminating players2 - ", next_round)

# Nested, complex dictionary
# --------------------------


person = {
    'name' : 'Alex',
    'pets' : [
        {'name' : 'Arthur', 'animal' : 'cat'},
        {'name' : 'Judith', 'animal' : 'dog'},
        {'name' : 'Gwen', 'animal' : 'goldfish'}
    ],
    'addresses' : [
        {'name' : 'work', 'building' : '50', 'street' : 'Commercial Street'},
        {'name' : 'home', 'building' : '10', 'street' : 'South Street'}
    ]
    }


def my_filter(pair):
    unwanted_value = 'home'
    key, value = pair
    if value == unwanted_value:
        return False
    else: 
        return True
    
# Now parsing through the structure.
addresses = person['addresses']

print("All addresses", addresses)
# Go through this list of dictionaries and find the one whose value relates to the home address.
property = [d for d in addresses if d['name'] == 'work']

# We have now have a list of 1 dictionary
print("Home - ", property)

# Build up the nice string
nice_address = property[0]['building'] + " " + property[0]['street']
print(nice_address)

# Access the pet dictionary
pets = person['pets']
print("Pets : ", pets)        
# We now have a list of pets for this person.

str_temp = person['name'] + " has " + str(len(pets))+ " pets:"
print(str_temp)

# Traverse through the list and build up the nicely formatted string.
# Iterate through the list of dictionaries and build up the string, place a comma after each pet name (barring the last one)
for p in pets:
    str_temp +=  ' a ' + p['animal'] + " called " + p['name'] + ","
    # Strip the last comma.

str_temp = str_temp[:-1]
print(str_temp)
